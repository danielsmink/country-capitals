{"version":3,"file":"country-capitals.min.js","sources":["country-capitals.config.js","country-capitals.module.js","country-capitals.routes.js","countries/countries.ctrl.js","country-detail/country-detail.ctrl.js","data/country-capitals.cache.js","data/country-capitals.svc.js"],"names":[],"mappings":"AAAA,YCWA,SAAA,QAAA,GACA,EACA,KAAA,KACA,YAAA,iCAEA,KAAA,cACA,YAAA,yCACA,WAAA,gBACA,aAAA,cAEA,KAAA,+BACA,YAAA,mDACA,WAAA,oBACA,aAAA,YAEA,KAAA,UACA,SAAA,gCAEA,WACA,WAAA,WCrBA,QAAA,eAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,IAAA,YAEA,GAAA,WAAA,EAEA,EAAA,SAAA,cAEA,EAAA,GAAA,SAAA,GACA,EAAA,KAAA,IAIA,GACA,EAAA,SAAA,EACA,EAAA,WAAA,GAEA,EAAA,eACA,QAAA,SAAA,GACA,EAAA,IAAA,YAAA,EAAA,UACA,EAAA,SAAA,EAAA,IAAA,cACA,EAAA,WACA,EAAA,WAAA,GACA,MACA,MAAA,WACA,EAAA,MAAA,kCCzBA,QAAA,mBAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,IAEA,GAAA,cAAA,EAAA,QAAA,MAAA,KACA,EAAA,YAAA,EAAA,cAAA,GACA,EAAA,MAAA,EAAA,IAAA,EAAA,aACA,EAAA,WAAA,EAEA,EAAA,WAAA,EAAA,aAEA,EAAA,QACA,QAAA,GACA,QAAA,GACA,WAAA,IAIA,EAAA,OACA,EAAA,OAAA,EAAA,MACA,EAAA,WAAA,GAIA,EAAA,aACA,QAAA,SAAA,GACA,IAAA,EAAA,SAAA,OACA,EAAA,MAAA,4BAEA,EAAA,OAAA,QAAA,EAAA,SAAA,GAEA,EAAA,WAAA,EAAA,OAAA,SACA,QAAA,SAAA,GACA,IAAA,EAAA,SAAA,QAEA,EAAA,OAAA,SACA,KAAA,aACA,WAAA,KAEA,EAAA,IAAA,EAAA,YAAA,EAAA,UAEA,EAAA,OAAA,QAAA,EAAA,SAAA,GACA,EAAA,cAAA,EAAA,OAAA,QAAA,WACA,QAAA,SAAA,GACA,EAAA,OAAA,WAAA,EAAA,SAEA,EAAA,IAAA,EAAA,YAAA,EAAA,UAEA,MAAA,WACA,EAAA,MAAA,mCAIA,MAAA,WACA,EAAA,MAAA,qCAIA,MAAA,WACA,EAAA,MAAA,iCACA,EAAA,WACA,EAAA,WAAA,GACA,MC5DA,QAAA,eAAA,GACA,MAAA,GAAA,MCDA,QAAA,iBAAA,EAAA,EAAA,GAaA,QAAA,KAGA,MAAA,IAEA,OAAA,QACA,IAAA,EAAA,mBACA,QACA,SAAA,gBACA,SAAA,KAOA,QAAA,KAGA,MAAA,IAEA,OAAA,QACA,IAAA,EAAA,mBACA,QACA,SAAA,gBACA,SAAA,EACA,QAAA,EAAA,WAOA,QAAA,GAAA,GAGA,MAAA,IAEA,OAAA,QACA,IAAA,EAAA,cACA,QACA,SAAA,gBACA,SAAA,EACA,EAAA,EAAA,QACA,QAAA,EAAA,QACA,YAAA,EAAA,QACA,gBAAA,KAOA,QAAA,GAAA,GAGA,MAAA,IAEA,OAAA,QACA,IAAA,EAAA,kBACA,QACA,SAAA,gBACA,SAAA,EACA,UAAA,KAOA,QAAA,GAAA,GACA,EAAA,QAAA,EAlFA,GAAA,GAAA,GACA,GACA,aAAA,EACA,WAAA,EACA,WAAA,EACA,cAAA,EACA,QAAA,EACA,WAAA,EA8EA,OAAA,GL5FA,QACA,OAAA,6BACA,SAAA,iBAAA,eACA,SAAA,aAAA,4BMNA,QACA,OAAA,mBAAA,UAAA,YAAA,2BLGA,QACA,OAAA,mBACA,OAAA,0CCHA,QACA,OAAA,gBAAA,gGCDA,QACA,OAAA,oBAAA,uHCDA,QACA,OAAA,mBACA,QAAA,gBAAA,uDCFA,QACA,OAAA,mBACA,QAAA,kBAAA","sourcesContent":["'use strict';\n\n/*\n * Contains constants used throughout the application\n */\nangular\n  .module('countryCapitals.config', [])\n  .constant('geoApiUsername', 'danielsmink')\n  .constant('apiBaseUrl', 'http://api.geonames.org/');\n","'use strict';\n\nangular\n  .module('countryCapitals', ['ngRoute', 'ngAnimate', 'countryCapitals.config']);\n","'use strict';\n\n/*\n * Route configuration\n */\n\nangular\n  .module('countryCapitals')\n  .config(config);\n\n/* @ngInject */\nfunction config ($routeProvider) {\n  $routeProvider\n    .when('/', {\n      templateUrl: './js/partials/home/home.html'\n    })\n    .when('/countries', {\n      templateUrl: './js/partials/countries/countries.html',\n      controller: 'CountriesCtrl',\n      controllerAs: 'countries'\n    })\n    .when('/countries/:country/capital', {\n      templateUrl: './js/partials/country-detail/country-detail.html',\n      controller: 'CountryDetailCtrl',\n      controllerAs: 'country'\n    })\n    .when('/error', {\n      template : '<p>Error Page Not Found</p>'\n    })\n    .otherwise({\n      redirectTo : '/error'\n    });\n}","'use strict';\n\n/*\n * Countries controller\n */\nangular\n  .module('CountriesCtrl', CountriesCtrl);\n\n/* @ngInject */\nfunction CountriesCtrl ($location, $timeout, geonamesService, geonamesCache) {\n  var countries = this,\n    cache = geonamesCache.get('countries');\n\n  countries.isLoading = true;\n\n  countries.ordering = 'countryName';\n\n  countries.go = function (path) {\n    $location.path(path);\n  };\n\n  // Use cache if the country list is already cached\n  if (cache) {\n    countries.geonames = cache;\n    countries.isLoading = false;\n  } else {\n    geonamesService.getCountries()\n      .success(function (geonames) {\n        geonamesCache.put('countries', geonames.geonames);\n        countries.geonames = geonamesCache.get('countries');\n      }, $timeout(function(){\n        countries.isLoading = false;\n      }, 1000))\n      .error(function () {\n        countries.error = 'Error retrieving country list';\n      });\n  }\n}\n","'use strict';\n\n/*\n * Country detail controller\n */\nangular\n  .module('CountryDetailCtrl', CountryDetailCtrl);\n\n/* @ngInject */\nfunction CountryDetailCtrl ($timeout, $routeParams, $location, geonamesService, geonamesCache) {\n  var country = this;\n\n  country.countryParams = $routeParams.country.split('-');\n  country.countryCode = country.countryParams[0];\n  country.cache = geonamesCache.get(country.countryCode);\n  country.isLoading = true;\n\n  geonamesService.setIsoCode(country.countryCode);\n\n  country.detail = {\n    country: '',\n    capital: '',\n    neighbours: ''\n  };\n\n  // Use cache if the country is already cached\n  if (country.cache) {\n    country.detail = country.cache;\n    country.isLoading = false;\n  } else {\n    // @TODO refactor to prevent deep nesting and unreadable code\n    // Get country info\n    geonamesService.getCountry()\n      .success(function (detail) {\n        if(detail.geonames.length === 0) {\n          country.error = 'Error retrieving country';\n        } else {\n          country.detail.country = detail.geonames[0];\n          // Get capital\n          geonamesService.getCapital(country.detail.country)\n            .success(function (capital) {\n              if(capital.geonames.length === 0) {\n                // If no capital is found we assume the country has no capital\n                country.detail.capital ={\n                  name: 'No capital',\n                  population: '0'\n                };\n                geonamesCache.put(country.countryCode, country.detail);\n              } else {\n                country.detail.capital = capital.geonames[0];\n                geonamesService.getNeighbours(country.detail.country.geonameId)\n                  .success(function (neighbours) {\n                    country.detail.neighbours = neighbours.geonames;\n                    // Cache both country and capital info\n                    geonamesCache.put(country.countryCode, country.detail);\n                  })\n                  .error(function () {\n                    country.error = 'Error retrieving neighbours';\n                  });\n              }\n            })\n            .error(function () {\n              country.error = 'Error retrieving capital info';\n            });\n        }\n      })\n      .error(function () {\n        country.error = 'Error retrieving country list';\n      }, $timeout(function(){\n        country.isLoading = false;\n      }, 1000));\n  }\n}","'use strict';\n\n/*\n * Contains a service to communicate with the Geonames API\n */\nangular\n  .module('countryCapitals')\n  .factory('geonamesCache', geonamesCache);\n\n/* @ngInject */\nfunction geonamesCache ($cacheFactory) {\n  return $cacheFactory(name);\n}","'use strict';\n\n/*\n * Contains a service to communicate with the Geonames API\n */\nangular\n  .module('countryCapitals')\n  .factory('geonamesService', geonamesService);\n\n/* @ngInject */\nfunction geonamesService ($http, geoApiUsername, apiBaseUrl) {\n\n  var isoCode = '',\n    service = {\n    getCountries: getCountries,\n    getCountry: getCountry,\n    getCapital: getCapital,\n    getNeighbours: getNeighbours,\n    isoCode: isoCode,\n    setIsoCode: setIsoCode\n  };\n\n  // Retrieve a list of countries\n  function getCountries () {\n\n    // return Promise\n    return $http(\n      {\n        method: 'JSONP',\n        url: apiBaseUrl + '/countryInfoJSON',\n        params: {\n          callback: 'JSON_CALLBACK',\n          username: geoApiUsername\n        }\n      }\n    );\n  }\n\n  // Retrieve a single country\n  function getCountry () {\n\n    // return Promise\n    return $http(\n      {\n        method: 'JSONP',\n        url: apiBaseUrl + '/countryInfoJSON',\n        params: {\n          callback: 'JSON_CALLBACK',\n          username: geoApiUsername,\n          country: service.isoCode\n        }\n      }\n    );\n  }\n\n  // Retrieve capital info from Geonames API\n  function getCapital (country) {\n\n    // return Promise\n    return $http(\n      {\n        method: 'JSONP',\n        url: apiBaseUrl + '/searchJSON',\n        params: {\n          callback: 'JSON_CALLBACK',\n          username: geoApiUsername,\n          q: country.capital,\n          country: service.isoCode,\n          name_equals: country.capital,\n          isNameRequired: true\n        }\n      }\n    );\n  }\n\n  // Retrieve country neighbours from Geonames API\n  function getNeighbours (geonameId) {\n\n    // return Promise\n    return $http(\n      {\n        method: 'JSONP',\n        url: apiBaseUrl + '/neighboursJSON',\n        params: {\n          callback: 'JSON_CALLBACK',\n          username: geoApiUsername,\n          geonameId: geonameId\n        }\n      }\n    );\n  }\n\n  // Set isoCode so it can be easily reused\n  function setIsoCode (isoCode) {\n    service.isoCode = isoCode;\n  }\n\n  return service;\n}"],"sourceRoot":"/source/"}