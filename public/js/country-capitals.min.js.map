{"version":3,"file":"country-capitals.min.js","sources":["country-capitals.config.js","country-capitals.module.js","country-capitals.routes.js","countries/countries.ctrl.js","data/country-capitals.cache.js","data/country-capitals.svc.js"],"names":[],"mappings":"AAAA,YCWA,SAAA,QAAA,GACA,EACA,KAAA,KACA,YAAA,iCAEA,KAAA,cACA,YAAA,yCACA,WAAA,gBACA,aAAA,cAEA,KAAA,uBACA,YAAA,qDAEA,KAAA,UACA,SAAA,gCAEA,WACA,WAAA,WCnBA,QAAA,eAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,IAAA,YAEA,GAAA,SAAA,cAGA,EACA,EAAA,SAAA,EAEA,EAAA,eACA,QAAA,SAAA,GACA,EAAA,IAAA,YAAA,EAAA,UACA,EAAA,SAAA,EAAA,IAAA,eAEA,MAAA,WACA,EAAA,MAAA,kCCfA,QAAA,eAAA,GACA,MAAA,GAAA,MCDA,QAAA,iBAAA,EAAA,EAAA,GAMA,QAAA,KAGA,MAAA,IAEA,OAAA,QACA,IAAA,EAAA,mBACA,QACA,SAAA,gBACA,SAAA,KAbA,GAAA,IACA,aAAA,EAkBA,OAAA,GJ1BA,QACA,OAAA,6BACA,SAAA,iBAAA,eACA,SAAA,aAAA,4BKNA,QACA,OAAA,mBAAA,UAAA,2BJGA,QACA,OAAA,mBACA,OAAA,0CCHA,QACA,OAAA,gBAAA,yECDA,QACA,OAAA,mBACA,QAAA,gBAAA,uDCFA,QACA,OAAA,mBACA,QAAA,kBAAA","sourcesContent":["'use strict';\n\n/*\n * Contains constants used throughout the application\n */\nangular\n  .module('countryCapitals.config', [])\n  .constant('geoApiUsername', 'danielsmink')\n  .constant('apiBaseUrl', 'http://api.geonames.org/');\n","'use strict';\n\nangular\n  .module('countryCapitals', ['ngRoute', 'countryCapitals.config']);\n","'use strict';\n\n/*\n * Route configuration\n */\n\nangular\n  .module('countryCapitals')\n  .config(config);\n\n/* @ngInject */\nfunction config ($routeProvider) {\n  $routeProvider\n    .when('/', {\n      templateUrl: './js/partials/home/home.html'\n    })\n    .when('/countries', {\n      templateUrl: './js/partials/countries/countries.html',\n      controller: 'CountriesCtrl',\n      controllerAs: 'countries'\n    })\n    .when('/countries/:country', {\n      templateUrl: './js/partials/country-detail/country-detail.html'\n    })\n    .when('/error', {\n      template : '<p>Error Page Not Found</p>'\n    })\n    .otherwise({\n      redirectTo : '/error'\n    });\n}","'use strict';\n\n/*\n * Countries controller\n */\nangular\n  .module('CountriesCtrl', CountriesCtrl);\n\n/* @ngInject */\nfunction CountriesCtrl (geonamesService, geonamesCache) {\n  var countries = this,\n    cache = geonamesCache.get('countries');\n\n  countries.ordering = 'countryName';\n\n  // Use cache if the country list is already cached\n  if (cache) {\n    countries.geonames = cache;\n  } else {\n    geonamesService.getCountries()\n      .success(function (geonames) {\n        geonamesCache.put('countries', geonames.geonames);\n        countries.geonames = geonamesCache.get('countries');\n      })\n      .error(function () {\n        countries.error = 'Error retrieving country list';\n      });\n  }\n}\n","'use strict';\n\n/*\n * Contains a service to communicate with the Geonames API\n */\nangular\n  .module('countryCapitals')\n  .factory('geonamesCache', geonamesCache);\n\n/* @ngInject */\nfunction geonamesCache ($cacheFactory) {\n  return $cacheFactory(name);\n}","'use strict';\n\n/*\n * Contains a service to communicate with the Geonames API\n */\nangular\n  .module('countryCapitals')\n  .factory('geonamesService', geonamesService);\n\n/* @ngInject */\nfunction geonamesService ($http, geoApiUsername, apiBaseUrl) {\n\n  var service = {\n    getCountries: getCountries\n  };\n\n  function getCountries () {\n\n    // return Promise\n    return $http(\n      {\n        method: 'JSONP',\n        url: apiBaseUrl + '/countryInfoJSON',\n        params: {\n          callback: 'JSON_CALLBACK',\n          username: geoApiUsername\n        }\n      }\n    );\n  }\n\n  return service;\n}"],"sourceRoot":"/source/"}